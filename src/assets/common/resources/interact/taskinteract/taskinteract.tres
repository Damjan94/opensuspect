[gd_resource type="Resource" load_steps=2 format=2]

[sub_resource type="GDScript" id=1]
script/source = "tool
extends Resource

class_name TaskInteract

enum type {fuck, you}
export(String) var task_name
export(type) var task_type
export(PoolStringArray) var item_inputs = []
export(Dictionary) var outputs

var list_abc = true
var abc = \"Script\"

func init_task():
	print(abc)

func _init():
	if Engine.editor_hint:
		
		return
	print(abc)

#overrides get, allows for export var groups
func _get(property):
	match property:
		\"group/subgroup/abc\":
			return abc 
		\"group/list_abc\":
			return list_abc

#overrides set, allows for export var groups
func _set(property, value): # overridden
	match property:
		\"group/subgroup/abc\":
			abc = value
		\"group/list_abc\":
			list_abc = value
			#updates inspector
			property_list_changed_notify()
	return true

#overrides _get_property_list, tells editor to show more vars in inspector
func _get_property_list():
	var property_list = []
	property_list.append({
		\"name\": \"group/list_abc\",
		\"type\": TYPE_BOOL,
		\"usage\": PROPERTY_USAGE_DEFAULT,
		\"hint\": PROPERTY_HINT_NONE,
		})
	if list_abc == true:
		property_list.append({
		\"name\": \"group/subgroup/abc\",
		\"type\": TYPE_STRING,
		\"usage\": PROPERTY_USAGE_DEFAULT,
		\"hint\": PROPERTY_HINT_NONE,
		\"hint_string\": \"one,two,three\",
		})
	return property_list
"

[resource]
resource_local_to_scene = true
resource_name = "Task"
script = SubResource( 1 )
task_name = ""
task_type = 1
item_inputs = PoolStringArray(  )
outputs = {

}
group/list_abc = true
group/subgroup/abc = "Script"
